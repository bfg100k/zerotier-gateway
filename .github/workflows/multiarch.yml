name: Multiarch build
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types:
      - created

env:
  IMAGE_NAME: zerotier

jobs:
  build:
    name: Build images
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [ amd64, i386, arm64v8, arm32v7, arm32v6 ]
    steps:
      - name: Checkout zerotier-gateway
        uses: actions/checkout@v2

      - name: Install qemu dependency
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static

      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ matrix.arch }}
          arch: ${{ matrix.arch }}
          build-args: |
            ALPINE_IMAGE=${{ format('docker.io/{0}/alpine', matrix.arch) }}
          dockerfiles: |
            ./Dockerfile

      - name: Check images created
        run: buildah images | grep '${{ env.IMAGE_NAME }}'

      - name: Check image metadata
        run: |
          set -x
          buildah inspect ${{ steps.build_image.outputs.image }}:${{ matrix.arch }} | jq ".OCIv1.architecture"
          buildah inspect ${{ steps.build_image.outputs.image }}:${{ matrix.arch }} | jq ".Docker.architecture"

      - name: Export image
        run: podman save -o /tmp/image.tar ${{ steps.build_image.outputs.image }}:${{ matrix.arch }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: image-${{ matrix.arch }}
          path: /tmp/image.tar

  push:
    name: Publish images
    runs-on: ubuntu-latest
    needs: build
    environment: production
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Import images
        run: |
          podman load -i ./image-amd64/image.tar
          podman load -i ./image-i386/image.tar
          podman load -i ./image-arm64v8/image.tar
          podman load -i ./image-arm32v7/image.tar
          podman load -i ./image-arm32v6/image.tar

      - name: Create multi-arch manifest
        run: |
          buildah manifest create ${{ env.IMAGE_NAME }}:latest
          buildah manifest add --arch amd64 ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:amd64
          buildah manifest add --arch 386 ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:i386
          buildah manifest add --arch arm64 --variant v8 ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:arm64v8
          buildah manifest add --arch arm --variant v7 ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:arm32v7
          buildah manifest add --arch arm --variant v6 ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:arm32v6

      - name: Push unstable images
        if: ${{ github.event_name == 'push' }}
        run: |
          buildah manifest push --all --format v2s2 --creds ${{ secrets.DOCKERHUB_NAME }}:${{ secrets.DOCKERHUB_TOKEN }} ${{ env.IMAGE_NAME }}:latest docker://docker.io/${{ secrets.DOCKERHUB_NAME }}/${{ env.IMAGE_NAME }}:main
          
      - name: Push stable images
        if: ${{ github.event_name == 'release' }}
        run: |
          buildah manifest push --all --format v2s2 --creds ${{ secrets.DOCKERHUB_NAME }}:${{ secrets.DOCKERHUB_TOKEN }} ${{ env.IMAGE_NAME }}:latest docker://docker.io/${{ secrets.DOCKERHUB_NAME }}/${{ env.IMAGE_NAME }}:latest
          buildah manifest push --all --format v2s2 --creds ${{ secrets.DOCKERHUB_NAME }}:${{ secrets.DOCKERHUB_TOKEN }} ${{ env.IMAGE_NAME }}:latest docker://docker.io/${{ secrets.DOCKERHUB_NAME }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}
